# False positive: CXX-10523
race:^ncbi::ncbi_namespace_mutex_mt::SSystemMutex::Lock(
race:^ncbi::CSafeStatic<ncbi::CParam




################################################################
# grichenk

# false positive CXX-10544
race:^ncbi::CSafeStatic<ncbi::CTls
race:^ncbi::CTlsBase::x_SetValue

# error, just not important - ignore (whole test) CXX-10544
race:corelib/test/test_ncbidiag_mt.cpp

# This one is actually a race, the only possible consequence is 
# an additional message about temporary suspending log output. 
# So suppress this and leave the code as-is.
# CXX-10544
race:^ncbi::CDiagContext::ApproveMessage(ncbi::SDiagMessage&,

# The only danger here is to calculate and cache the same value several times. CXX-10544
race:^ncbi::objects::CSeq_loc::x_UpdateTotalRange()

# ncbi_url.cpp default encoder. Leave as is. CXX-10543
race:^ncbi::CSafeStatic<ncbi::CDefaultUrlEncoder, ncbi::CSafeStatic_Callbacks<ncbi::CDefaultUrlEncoder> >::x_Init()$

# There's no actual race, the variable is read while executing ~CSeq_id_Mapper when no other threads are using it. CXX-10543
race:^ncbi::objects::CSeq_id_Textseq_Tree::Empty()

# This is actually a race, but harmless. CXX-10546
race:^s_ResetInstance$
race:^ncbi::objects::CSeq_id_Which_Tree::DropInfo

#  write protected, read without any protection. CXX-11270
race:^ncbi::CHookData<ncbi::CWriteClassMemberHook




################################################################
# ivanov

# It is unsafe to use CTime::AsString() in exit print handler,
# because it allocates memory, that is not signal-safe.
# NOTE: ThreadSanitizer doesn't work with test_ncbi_system,
#       that have limits tests that incompatible with sanitizer. 
signal:corelib/test/test_ncbi_system.cpp

# False positive deadlock detection in util/test/test_histogram_mt. CXX-12217
deadlock:^CTest::ThreadHandler(int)

################################################################
# vasilche CXX-10546

# error, just not important - ignore (whole test)
race:corelib/test/test_tls_object.cpp

# false positive -- last CRef release
race:^ncbi::CPoolOfThreads_ForServer::AcceptRequest

# false positive -- loading locks come in any order, deadlocks are tracked and avoided
deadlock:^ncbi::objects::GBL::CInfoManager::x_LockInfoMutex

# false positive -- double-check initialization
race:^ncbi::objects::CCSRADataLoader_Impl::GetSRRFile

# false positive -- one-time initialization, order doesn't matter
race:^CCSRATestApp::GetMaxSpotId

# false positive -- CSeq_id_Handle uses lock-less access to generated CSeq_id
race:^ncbi::objects::CSeq_id_General_Str_Info::Restore

# false positive -- CSeq_id_Handle uses lock-less access to generated CSeq_id
race:^ncbi::objects::CSeq_id_Gi_Info::GetPackedSeqId

# false positive -- deletion and removal from indexes are controlled by atomic counters
race:^ncbi::objects::CSeq_id_InfoLocker::Unlock

# false positive -- double-check initialization
race:^ncbi::objects::CDataSource::SetLoaded

# false positive -- one-time initialization, order doesn't matter
race:^ncbi::objects::CCSraRefSeqIterator::GetSeqLength

# false positive -- CInitMutexPool doesn't delete its mutexes
deadlock:^ncbi::CInitGuard::CInitGuard

# false positive -- CInitMutexPool doesn't delete its mutexes
race:^ncbi::CInitMutexPool::AcquireMutex

# false positive -- CInitMutexPool doesn't delete its mutexes
race:^ncbi::CInitMutexPool::ReleaseMutex

# false positive -- double-check initialization
race:^ncbi::CInitMutex_Base::operator void

# false positive -- double-check initialization
race:^ncbi::CInitMutex*::GetPointer

# false positive -- doubke-check initialization
race:^ncbi::objects::CSynonymsSet::ContainsSynonym

# false positive -- double-check initialization
race:^ncbi::objects::CSeq_id_Mapper::GetInstance

# false positive -- double-check initialization
race:^ncbi::CSafeStatic*::x_Init

# false positive -- one-time initialization, order doesn't matter
race:^ncbi::objects::CSeq_loc::GetTotalRange

# false positive -- values are read in a MT-safe manner
race:^ncbi::objects::CPagedFile::GetReadStatistics

# false positive -- page read is guarded, check page position is safely unguarded
race:^ncbi::objects::CBGZFFile::x_ReadBlock

# false positive -- double-check
race:^ncbi::objects::CTSE_Info_Object::x_ResetDirtyAnnotIndex

# false positive -- double-check
race:^ncbi::objects::CTSE_Info_Object::x_DirtyAnnotIndex

# false positive -- double-check
race:^ncbi::objects::CScopeInfo_Base::x_ResetTSE_Lock

# false positive -- double-check one-time initialization
race:^ncbi::CTypeRef::Get

# false positive -- double-check one-time initialization
race:^ncbi::*_Base::GetTypeInfo()

# false positive -- double-check one-time initialization
race:^ncbi::objects::CTSE_Chunk_Info::SetLoaded

# false positive -- double-check one-time initialization
race:^ncbi::objects::CBioseq_Info::GetSeqMap

# false positive -- double-check one-time initialization
race:^ncbi::objects::CSeqMap::x_FindSegment

# false positive -- double-check one-time initialization
race:^ncbi::objects::CSeqMap::GetLength



################################################################
# lavr CXX-11285

# test_ncbi_trigger -- confirmed false-positive (lavr)
race:^TRIGGER_Reset

# thread leak in test_ncbi_trigger, probably can be rewritten
thread:test_ncbi_trigger

# Setting the shutdown flag doesn't need to be protected (by vakatov)
race:^ncbi::CTestServer::ShutdownRequested()

# This is for statistics purposes only. /connect/ncbi_socket.c
race:^s_Create$

# Debugging aid. For lock check consistency /connect/ncbi_socket.c
race:^g_NCBI_CoreCheckLock$

# Pre-check followed by lock-and-check-and-modify. /connect/ncbi_socket.c
race:^ncbi::CConnIniter::CConnIniter()
race:^s_InitAPI_$

# This is a debugging aid, code sanity check. /connect/ncbi_core.c
race:^MT_LOCK_AddRef$

# test_ncbi_conn_stream_mt -- confirmet false positive (lavr)
race:^MT_LOCK_DoInternal




################################################################
# ucko CXX-11303

# the race is real, but AFAICT harmless in this context
race:^tds_socket_write$
race:^tds_socket_read$

# False positives -- the writes in question cannot occur until the
# worker thread responsible for previous reads has finished with them
# and released its CRef.
race:>::CQueueItem::~CQueueItem()$
race:^ncbi::CRef<ncbi::CStdRequest, ncbi::CObjectCounterLocker>::Reset()$



################################################################
# satskyse CXX-11282

# It has already been checked by the original developer long ago,
# see the SVN revision 347572 (false positive) CSyncQueue<...>
race:>::x_GuardedUnlock() const$
race:>::x_IsGuarded() const$

# It has already been checked by the original developer long ago,
# see the SVN revision 347572 (false positives) CThreadPool...
race:^ncbi::CThreadPool_Task::x_SetStatus(ncbi::CThreadPool_Task::EStatus)$

# this is rather timing (CSyncQueue<...>)
race:>::GetSize() const$

# this is rather timing
race:^ncbi::CThreadPool_Task::GetStatus() const$
race:^ncbi::CThreadPool_Task::IsCancelRequested() const$
race:^ncbi::CThreadPool_Task::IsFinished() const$
race:^ncbi::CThreadPool_Task::x_RequestToCancel()$
race:^ncbi::CThreadPool_ThreadImpl::RequestToFinish()$
race:^ncbi::CThreadPool_ThreadImpl::CancelCurrentTask()$
race:^ncbi::CThreadPool_ServiceThread::IsFinished()$
race:^ncbi::CThreadPool_ServiceThread::RequestToFinish()$
race:^ncbi::CThreadPool_Impl::x_NoNewTaskAllowed() const$
race:^ncbi::CThreadPool_Impl::RequestSuspend(unsigned int)$
race:^ncbi::CThreadPool_Impl::ResumeWork()$

# The complain is for the case when a task is cancelled. The cancelling is done
# via CThreadPool_Impl::CancelTask(), i.e. the pool exists and m_Pool is set.
race:^ncbi::CThreadPool_Task::GetPool() const$

# False positive: a CRef<> task is used from different threads and the
# destruction logic in CRef<> does not use anything like mutex but an atomic
# counter.
race:^CTerminator_Task::~CTerminator_Task()$
race:^CSentinelThreadPool_Task::~CSentinelThreadPool_Task()$

# CRefs are set to NULL so GCC thread sanitizer does not like it
race:^ncbi::CThreadPool_Impl::DestroyReference()$

# The test works with tasks consequently moving from one state to another so
# the CRef to the task are good and may not be in conflict
race:^CThreadPoolTester::Thread_Run(int)$


################################################################
# satskyse CXX-11623

# Formally suppress complains on libuv and datastax
race:^uv__writev$
race:^uv_mutex_lock$
race:^uv_mutex_unlock$
race:^uv_mutex_destroy$
race:^uv_export_wait$
race:^uv_export_wait$
race:^cass_prepared_bind$
race:^datastax::internal::core::Session::execute(datastax::internal::SharedRefPtr<datastax::internal::core::Request const> const&)$
race:^datastax::internal::core::Buffer::copy(datastax::internal::core::Buffer const&)$
race:^datastax::internal::core::Buffer::copy(unsigned long, char const*, unsigned long)$
race:^datastax::internal::Memory::free(void*)$
race:^std::__cxx11::basic_string<char, std::char_traits<char>, datastax::internal::Allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, datastax::internal::Allocator<char> > const&) const$



################################################################
# sadyrov CXX-12552

# False positive
race:^ncbi::CServer_Request::~CServer_Request()


